# Defines next align specs
genes: ["ORF1a", "ORF1b", "S", "ORF3a", "M", "N"]
use_nextalign: true
conda_environment: "workflow/envs/nextstrain.yaml"

# Define custom rules
custom_rules:
  - ny_profiles/ny/add_to_builds.smk

inputs:
  - ny:
    metadata: "data/ny_metadata.tsv"
    sequences: "data/ny_sequences.fasta"
  - name: gisaid
    metadata: "s3://nextstrain-ncov-private/metadata.tsv.gz"
    filtered: "s3://nextstrain-ncov-private/filtered_gisaid.fasta.xz"
    # ---------------------- NOTE --------------------------
    # PR 550 changed the path of intermediate files on
    # the S3 bucket to include the origin (e.g. _gisaid).
    # Some of these files may not yet exist!
    # ------------------------------------------------------
    # metadata: "s3://nextstrain-ncov-private/metadata_gisaid.tsv.gz"
    # sequences: "s3://nextstrain-ncov-private/sequences_gisaid.fasta.gz"
    # aligned: "s3://nextstrain-ncov-private/aligned_gisaid.fasta.xz"
    # to-exclude: "s3://nextstrain-ncov-private/to-exclude_gisaid.txt.xz"
    # masked: "s3://nextstrain-ncov-private/masked_gisaid.fasta.fasta.xz"
    # filtered: "s3://nextstrain-ncov-private/filtered_gisaid.fasta.xz"

# Define custom auspice configuration to enable frequencies.
files:
  auspice_config: "ny_profiles/ny/auspice_config.json"

# Define NY builds.
builds:

  ny_6m:
    title: "NY-focused SARS-CoV-2 genomic analysis"
    division: New York
    n_sequences: 2000
    subsampling_scheme: time-window

# Define subsampling scheme for builds. This scheme should include as much
# local diversity for a given division as possible and contextual samples from
# the rest of the USA and the world.
subsampling:
  time-window:
    # Subsampling for a given time window
    local-focus:
      # Evenly sample from earliest_date to latest_date for the current division.
      group_by: "division"
      max_sequences: "{n_sequences}"
      max_date: --max-date {latest_date}
      min_date: --min-date {earliest_date}
      query: --query "(country == 'USA' & division == '{division}' & purpose_of_sequencing != 'S dropout')"
    usa-context:
      # Sampling in the time window from other divisions in the USA, prioritizing
      # samples genetically similar to the current division's sequences.
      group_by: "year month"
      max_sequences: "{n_usa}"
      max_date: --max-date {latest_date}
      min_date: --min-date {earliest_date}
      query: --query "(country == 'USA' & division != '{division}' & purpose_of_sequencing != 'S dropout')"
      priorities:
        type: proximity
        focus: local-focus
    global-context:
      # Even sampling in the time window from across the world excluding the USA,
      # prioritizing samples genetically similar to current division's sequences.
      group_by: "region year month"
      max_sequences: "{n_global}"
      max_date: --max-date {latest_date}
      min_date: --min-date {earliest_date}
      query: --query "(country != 'USA' & purpose_of_sequencing != 'S dropout')"
      priorities:
        type: proximity
        focus: local-focus
    local-context-early:
      # Even sampling before the time window for the current division,
      # prioritizing samples genetically similar to divison's sequences
      # within the time window.
      group_by: "year month"
      max_sequences: "{n_early}"
      max_date: --max-date {earliest_date}
      query: --query "(country == 'USA' & division == '{division}' & purpose_of_sequencing != 'S dropout')"
      priorities:
        type: proximity
        focus: local-focus
    global-context-early:
      # Even sampling before the time window from the world, excluding USA,
      # prioritizing samples genetically similar to the division.
      group_by: "region year month"
      max_sequences: "{n_global_early}"
      max_date: --max-date {earliest_date}
      query: --query "(division != '{division}' & purpose_of_sequencing != 'S dropout')"
      priorities:
        type: proximity
        focus: local-context-early
